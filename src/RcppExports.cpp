// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// arma_rowMeans
arma::vec arma_rowMeans(const arma::mat X);
RcppExport SEXP _covcpd_arma_rowMeans(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_rowMeans(X));
    return rcpp_result_gen;
END_RCPP
}
// arma_colMeans
arma::vec arma_colMeans(const arma::mat X);
RcppExport SEXP _covcpd_arma_colMeans(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_colMeans(X));
    return rcpp_result_gen;
END_RCPP
}
// testCov_cpp
List testCov_cpp(arma::mat X, arma::mat Y, double alpha);
RcppExport SEXP _covcpd_testCov_cpp(SEXP XSEXP, SEXP YSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(testCov_cpp(X, Y, alpha));
    return rcpp_result_gen;
END_RCPP
}
// CLXstatPerm
arma::mat CLXstatPerm(arma::mat X, arma::vec searchx, int start, unsigned int nperm);
RcppExport SEXP _covcpd_CLXstatPerm(SEXP XSEXP, SEXP searchxSEXP, SEXP startSEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type searchx(searchxSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nperm(npermSEXP);
    rcpp_result_gen = Rcpp::wrap(CLXstatPerm(X, searchx, start, nperm));
    return rcpp_result_gen;
END_RCPP
}
// calc_ranks
arma::uvec calc_ranks(const arma::vec& da_ta);
RcppExport SEXP _covcpd_calc_ranks(SEXP da_taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type da_ta(da_taSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ranks(da_ta));
    return rcpp_result_gen;
END_RCPP
}
// CLXPermHier
arma::mat CLXPermHier(arma::mat X, arma::vec searchx, int start, unsigned int nt2, int minband, unsigned int nperm);
RcppExport SEXP _covcpd_CLXPermHier(SEXP XSEXP, SEXP searchxSEXP, SEXP startSEXP, SEXP nt2SEXP, SEXP minbandSEXP, SEXP npermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type searchx(searchxSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nt2(nt2SEXP);
    Rcpp::traits::input_parameter< int >::type minband(minbandSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nperm(npermSEXP);
    rcpp_result_gen = Rcpp::wrap(CLXPermHier(X, searchx, start, nt2, minband, nperm));
    return rcpp_result_gen;
END_RCPP
}
// myQnorm
double myQnorm(double mp);
RcppExport SEXP _covcpd_myQnorm(SEXP mpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mp(mpSEXP);
    rcpp_result_gen = Rcpp::wrap(myQnorm(mp));
    return rcpp_result_gen;
END_RCPP
}
// getMatNPN
arma::mat getMatNPN(arma::mat input, int N);
RcppExport SEXP _covcpd_getMatNPN(SEXP inputSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(getMatNPN(input, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_covcpd_arma_rowMeans", (DL_FUNC) &_covcpd_arma_rowMeans, 1},
    {"_covcpd_arma_colMeans", (DL_FUNC) &_covcpd_arma_colMeans, 1},
    {"_covcpd_testCov_cpp", (DL_FUNC) &_covcpd_testCov_cpp, 3},
    {"_covcpd_CLXstatPerm", (DL_FUNC) &_covcpd_CLXstatPerm, 4},
    {"_covcpd_calc_ranks", (DL_FUNC) &_covcpd_calc_ranks, 1},
    {"_covcpd_CLXPermHier", (DL_FUNC) &_covcpd_CLXPermHier, 6},
    {"_covcpd_myQnorm", (DL_FUNC) &_covcpd_myQnorm, 1},
    {"_covcpd_getMatNPN", (DL_FUNC) &_covcpd_getMatNPN, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_covcpd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
